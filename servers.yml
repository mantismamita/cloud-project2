Description: |
    Kirsten Cassidy - Udacity Cloud Devops Project 2 

Parameters:

    EnvironmentName:
        Description: Env Name serving as prefix to access output variables
        Type: String

Resources: 
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupName: Load Balancer Project 2
            GroupDescription: Load Balancer Security Group Project 2
            SecurityGroupIngress: 
                - CidrIp: 0.0.0.0/0
                  FromPort: 80
                  ToPort: 80
                  IpProtocol: tcp
            SecurityGroupEgress: 
                - CidrIp: 0.0.0.0/0
                  FromPort: 80
                  ToPort: 80
                  IpProtocol: tcp
                - CidrIp: 0.0.0.0/0
                  FromPort: 8080
                  ToPort: 8080
                  IpProtocol: tcp
                - IpProtocol: tcp
                  FromPort: 8080
                  ToPort: 8080
                  CidrIpv6: ::/0
            VpcId:
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupName: Security Group for WebServer internal traffic Project 2
            GroupDescription: Allow http from local VPC
            VpcId: 
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"
            SecurityGroupEgress:   
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  ToPort: 65535
                  IpProtocol: tcp
            SecurityGroupIngress: 
                - CidrIp: 0.0.0.0/0
                  FromPort: 80
                  ToPort: 80
                  IpProtocol: tcp
                - CidrIp: 0.0.0.0/0
                  FromPort: 22
                  ToPort: 22
                  IpProtocol: tcp

    S3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole' 
          Policies:
            - PolicyName: S3BucketPolicy
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: "Allow"
                  Action:
                  - s3: '*'
                  Resource: '*'
          Path: /

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Roles:
              - !Ref S3ReadOnlyEC2

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName: 
                Ref: WebAppLaunchConfig
            MaxSize: '3'
            MinSize: '1'
            TargetGroupARNs:
              - Ref: WebAppTargetGroup

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties: 
            UserData:
                Fn::Base64: !Sub |
                  #!/bin/bash
                  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                  apt-get update -y
                  apt-get install unzip awscli -y
                  apt-get install apache2 -y
                  systemctl start apache2.service
                  cd /var/www/html
                  aws s3 cp s3://udacity-demo-1/udacity.zip .
                  unzip -o udacity.zip
            ImageId: ami-085925f297f89fce1
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: t3.small
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: 10

    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: 80
        Protocol: HTTP

    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 10
            HealthyThresholdCount: 2
            Port: 8080
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
              Fn::ImportValue:
                  Fn::Sub: "${EnvironmentName}-VPCID"


  #LoadBalancer

  #LaunchConfiguration

      #AutoScalingGroup
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties: 
  #     Roles:
  #       - UdacityS3ReadOnlyEC2
  
  #         #!/bin/bash
  #         apt-get update -y
  #         apt-get install unzip awscli -y
  #         apt-get install apache2 -y
  #         systemctl start apache2.service
  #         cd /var/www/html
  #         aws s3 cp s3://udacity-demo-1/udacity.zip .
  #         unzip -o udacity.zip
  # Outputs: 
  #Bonus points for useful outputs!